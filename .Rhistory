cdm <- cdm_from_con(db,
cdm_schema = "cdm_synthea_1M",
write_schema = "mcatalasabate")
cdm$drug_exposure
# 1) run all testthat tests (after reloading with current code) - do all pass?
devtools::test()
# 8) Rebuild readme
devtools::build_readme()
# 9) Document package
devtools::document() #  Use roxygen to document a package.
# 6) fuller checks - any warnings or notes to be fixed?
# note, warning about qpdf can be ignored
devtools::check() # updates the documentation, then builds and
# 5) Check documentation (as R CMD check)
devtools::check_man()
# 9) Document package
devtools::document() #  Use roxygen to document a package.
# 5) Check documentation (as R CMD check)
devtools::check_man()
# 9) Document package
devtools::document() #  Use roxygen to document a package.
# 5) Check documentation (as R CMD check)
devtools::check_man()
a <- c(1,2)
list(a)
length(alist(a))
# 9) Document package
devtools::document() #  Use roxygen to document a package.
# 5) Check documentation (as R CMD check)
devtools::check_man()
# 9) Document package
devtools::document() #  Use roxygen to document a package.
# 5) Check documentation (as R CMD check)
devtools::check_man()
# 9) Document package
devtools::document() #  Use roxygen to document a package.
# 5) Check documentation (as R CMD check)
devtools::check_man()
# 9) Document package
devtools::document() #  Use roxygen to document a package.
# 5) Check documentation (as R CMD check)
devtools::check_man()
warnings()
install.packages("roxygen2")
install.packages("roxygen2")
# 5) Check documentation (as R CMD check)
devtools::check_man()
warning()
warnings
warnings()
# 5) Check documentation (as R CMD check)
devtools::check_man()
warnings()
remove.packages("roxygen2")
install.packages("roxygen2")
install.packages("roxygen2")
install.packages("roxygen2")
# 5) Check documentation (as R CMD check)
devtools::check_man()
install.packages("roxygen2")
# 5) Check documentation (as R CMD check)
devtools::check_man()
# 4) check spelling throughout - any obvious typos to fix?
devtools::spell_check()
# 9) Document package
devtools::document() #  Use roxygen to document a package.
warnings()
x <- tibble(a = c(1,2,3), b = c(1,2,2))
x <- tibble(a = c(1,2,3), b = c(1,2,2))
library(dplyr)
x <- tibble(a = c(1,2,3), b = c(1,2,2))
x
x %>% filter(a == max(a))
x %>% group_by(b) %>% filter(a == max(a))
styler:::style_selection()
styler:::style_selection()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
dplyr::count()
sd
stats::mean
median
quantile
devtools::check()
devtools::check()
devtools::load_all()
#need person table
#obsercation table
cdm <- mockDrugUtilisation(
cohort1 = dplyr::tibble(
cohort_definition_id = c(1, 1, 1, 2, 2),
subject_id = c(1, 1, 2, 1, 2),
cohort_start_date = as.Date(c(
"2010-01-01", "2010-02-01", "2010-01-01", "2010-03-01",
"2010-02-01"
)),
cohort_end_date = as.Date(c(
"2010-01-10", "2010-02-10", "2010-01-11", "2020-03-10",
"2010-02-10"
))
),
person = dplyr::tibble(
person_id = c(1, 2),
gender_concept_id = c(8507, 8532),
year_of_birth = c(2000, 2001),
month_of_birth = c(1, 1),
day_of_birth = c(1, NA)
),
visit_occurrence =  dplyr::tibble(
person_id = c(1, 2),
visit_concept_id = c(1, 2),
visit_start_date = as.Date(c("2009-12-01","2009-12-01")),
visit_end_date = as.Date(c("2010-12-01","2010-12-01")))
)
result <- getTableOne(
cdm = cdm,
targetCohortName = "cohort1",
ageGroups = list(c(0,20), c(30,50)),
windowVisitOcurrence = c(-365,0),
minimumCellCount = 1
)
cdm = cdm
targetCohortName = "cohort1"
ageGroups = list(c(0,20), c(30,50))
windowVisitOcurrence = c(-365,0)
minimumCellCount = 1
covariatesTableName = NULL
covariatesSet = NULL
covariatesWindow = NULL
listTables<- list()
listTables <- c(listTables, list(
"covariatesTableName" = covariatesTableName,
"covariatesSet" = covariatesSet,
"covariatesWindow" = covariatesWindow
))
# first round of assertions CLASS
# start checks
errorMessage <- checkmate::makeAssertCollection()
# check cdm
checkmate::assertClass(
cdm,
"cdm_reference",
add = errorMessage
)
# check targetCohortName
checkmate::assertCharacter(
targetCohortName,
len = 1,
null.ok = FALSE,
any.missing = FALSE,
add = errorMessage
)
# check strataCohort
checkmate::assertTRUE(targetCohortName %in% names(cdm))
checkmate::assertTRUE("person" %in% names(cdm))
targetCohort <- cdm[[targetCohortName]]
# check targetCohortId
checkmate::assertInteger(
targetCohortId,
null.ok = TRUE,
add = errorMessage
)
targetCohortId = NUL
targetCohortId = NULL
# check targetCohortId
checkmate::assertInteger(
targetCohortId,
null.ok = TRUE,
add = errorMessage
)
# check ageGroups
checkmate::assert_list(ageGroups,
add = errorMessage
)
if (!is.null(ageGroups)) {
for (i in seq_along(ageGroups)) {
checkmate::assertTRUE(length(ageGroups[[i]]) == 2)
checkmate::assert_numeric(ageGroups[[i]][1],
add = errorMessage
)
checkmate::assert_numeric(ageGroups[[i]][2],
add = errorMessage
)
ageCheck <- ageGroups[[i]][1] <=
ageGroups[[i]][2]
checkmate::assertTRUE(ageCheck,
add = errorMessage
)
if (!isTRUE(ageCheck)) {
errorMessage$push(
"- upper age value must be equal or higher than lower age value"
)
}
checkmate::assertTRUE(ageGroups[[i]][1] >= 0,
add = errorMessage
)
checkmate::assertTRUE(ageGroups[[i]][2] >= 0,
add = errorMessage
)
}
}
checkmate::assertTRUE(length(listTables) == length(unique(names(listTables))))
namesTables <- names(listTables)
namesTables <- lapply(
stringr::str_split(namesTables, "[[:upper:]]"),
function(x) {
x[1]
}
) %>%
unlist() %>%
unique()
if (length(namesTables) > 0) {
for (k in 1:length(namesTables)) {
errorMessage <- checkmate::makeAssertCollection()
name <- namesTables[k]
tableName <- listTables[[paste0(name, "TableName")]]
set <- listTables[[paste0(name, "Set")]]
lookbackWindow <- listTables[[paste0(name, "Window")]]
checkmate::assertTibble(set, add = errorMessage)
checkmate::assertTRUE(
all(c("cohortId", "cohortName") %in% colnames(set)),
add = errorMessage
)
checkmate::assertIntegerish(set$cohortId, add = errorMessage)
checkmate::assertCharacter(
set$cohortName,
any.missing = FALSE, add = errorMessage
)
checkmate::assertIntegerish(
lookbackWindow,
min.len = 1,
max.len = 2,
null.ok = FALSE,
add = errorMessage
)
checkmate::assertTRUE(tableName %in% names(cdm), add = errorMessage)
checkmate::assertTRUE(
all(colnames(cdm[[tableName]]) %in% c(
"cohort_definition_id", "subject_id", "cohort_start_date",
"cohort_end_date"
)),
add = errorMessage
)
if (!errorMessage$isEmpty()) {
errorMessage$push(paste0("- In ", name))
}
checkmate::reportAssertions(collection = errorMessage)
}
}
namesTables
listTables
listTables <- list()
if (is.null(targetCohortId)) {
targetCohortId <- targetCohort %>%
dplyr::select("cohort_definition_id") %>%
dplyr::distinct() %>%
dplyr::pull()
} else {
targetCohort <- targetCohort %>%
dplyr::filter(.data$cohort_definition_id %in% .env$targetCohortId)
}
subjects <- targetCohort %>%
dplyr::select("subject_id", "cohort_start_date", "cohort_end_date") %>%
dplyr::distinct() %>%
addPriorHistory(cdm = cdm) %>%
addSex(cdm = cdm) %>%
addAge(cdm = cdm) %>%
dplyr::compute()
result <- targetCohort %>%
dplyr::left_join(
subjects,
by = c("subject_id", "cohort_start_date", "cohort_end_date")
) %>%
dplyr::group_by(.data$cohort_definition_id) %>%
dplyr::summarise(
number_obervations.count = as.character(dplyr::n()),
number_subjects.count = as.character(dplyr::n_distinct(.data$subject_id)),
sex_female.count = as.character(dplyr::count(.data$sex[.data$sex == "Female"])),
sex_male.count = as.character(dplyr::count(.data$sex[.data$sex == "Male"])),
age.mean = as.character(mean(.data$age, na.rm = TRUE)),
age.std = as.character(stats::sd(.data$age, na.rm = TRUE)),
prior_history.mean = as.character(mean(.data$prior_history, na.rm = TRUE)),
prior_history.std = as.character(stats::sd(.data$prior_history, na.rm = TRUE)),
number_observations.count = as.character(dplyr::n()),
cohort_start_date.min = as.character(min(
.data$cohort_start_date,
na.rm = TRUE
)),
cohort_start_date.max = as.character(max(
.data$cohort_start_date,
na.rm = TRUE
)),
cohort_end_date.min = as.character(min(
.data$cohort_end_date,
na.rm = TRUE
)),
cohort_end_date.max = as.character(max(
.data$cohort_end_date,
na.rm = TRUE
)),
.groups = "drop"
) %>%
dplyr::collect() %>%
dplyr::left_join(
targetCohort %>%
dplyr::left_join(
subjects,
by = c("subject_id", "cohort_start_date", "cohort_end_date")
) %>%
dplyr::group_by(.data$cohort_definition_id) %>%
dplyr::summarise(
age.median = as.character(stats::median(.data$age, na.rm = TRUE)),
age.quantile25 = as.character(stats::quantile(.data$age, 0.25, na.rm = TRUE)),
age.quantile75 = as.character(stats::quantile(.data$age, 0.75, na.rm = TRUE)),
.groups = "drop"
) %>%
dplyr::collect(),
by = "cohort_definition_id"
) %>%
dplyr::left_join(
targetCohort %>%
dplyr::left_join(
subjects,
by = c("subject_id", "cohort_start_date", "cohort_end_date")
) %>%
dplyr::group_by(.data$cohort_definition_id) %>%
dplyr::summarise(
prior_history.median = as.character(stats::median(.data$prior_history, na.rm = TRUE)),
prior_history.quantile25 = as.character(stats::quantile(.data$prior_history, 0.25, na.rm = TRUE)),
prior_history.quantile75 = as.character(stats::quantile(.data$prior_history, 0.75, na.rm = TRUE)),
.groups = "drop"
) %>%
dplyr::collect(),
by = "cohort_definition_id"
)
targetCohort %>%
dplyr::left_join(
subjects,
by = c("subject_id", "cohort_start_date", "cohort_end_date")
)
targetCohort %>%
dplyr::left_join(
subjects,
by = c("subject_id", "cohort_start_date", "cohort_end_date")
) %>%
dplyr::group_by(.data$cohort_definition_id) %>%
dplyr::summarise(
number_obervations.count = as.character(dplyr::n()),
number_subjects.count = as.character(dplyr::n_distinct(.data$subject_id)),
sex_female.count = as.character(dplyr::count(.data$sex[.data$sex == "Female"])),
sex_male.count = as.character(dplyr::count(.data$sex[.data$sex == "Male"])),
age.mean = as.character(mean(.data$age, na.rm = TRUE)),
age.std = as.character(stats::sd(.data$age, na.rm = TRUE)),
prior_history.mean = as.character(mean(.data$prior_history, na.rm = TRUE)),
prior_history.std = as.character(stats::sd(.data$prior_history, na.rm = TRUE)),
number_observations.count = as.character(dplyr::n()),
cohort_start_date.min = as.character(min(
.data$cohort_start_date,
na.rm = TRUE
)),
cohort_start_date.max = as.character(max(
.data$cohort_start_date,
na.rm = TRUE
)),
cohort_end_date.min = as.character(min(
.data$cohort_end_date,
na.rm = TRUE
)),
cohort_end_date.max = as.character(max(
.data$cohort_end_date,
na.rm = TRUE
)),
.groups = "drop"
)
targetCohort %>%
dplyr::left_join(
subjects,
by = c("subject_id", "cohort_start_date", "cohort_end_date")
) %>%
dplyr::group_by(.data$cohort_definition_id) %>%
dplyr::summarise(
number_obervations.count = as.character(dplyr::n()),
number_subjects.count = as.character(dplyr::n_distinct(.data$subject_id)),
sex_female.count = as.character(dplyr::count(.data$sex[.data$sex == "Female"])),
sex_male.count = as.character(dplyr::count(.data$sex[.data$sex == "Male"])),
age.mean = as.character(mean(.data$age, na.rm = TRUE)),
#age.std = as.character(stats::sd(.data$age, na.rm = TRUE)),
prior_history.mean = as.character(mean(.data$prior_history, na.rm = TRUE)),
prior_history.std = as.character(stats::sd(.data$prior_history, na.rm = TRUE)),
number_observations.count = as.character(dplyr::n()),
cohort_start_date.min = as.character(min(
.data$cohort_start_date,
na.rm = TRUE
)),
cohort_start_date.max = as.character(max(
.data$cohort_start_date,
na.rm = TRUE
)),
cohort_end_date.min = as.character(min(
.data$cohort_end_date,
na.rm = TRUE
)),
cohort_end_date.max = as.character(max(
.data$cohort_end_date,
na.rm = TRUE
)),
.groups = "drop"
)
targetCohort %>%
dplyr::left_join(
subjects,
by = c("subject_id", "cohort_start_date", "cohort_end_date")
) %>%
dplyr::group_by(.data$cohort_definition_id) %>%
dplyr::summarise(
number_obervations.count = as.character(dplyr::n()),
number_subjects.count = as.character(dplyr::n_distinct(.data$subject_id)),
sex_female.count = as.character(dplyr::count(.data$sex[.data$sex == "Female"])),
sex_male.count = as.character(dplyr::count(.data$sex[.data$sex == "Male"])),
age.mean = as.character(mean(.data$age, na.rm = TRUE)),
#age.std = as.character(stats::sd(.data$age, na.rm = TRUE)),
prior_history.mean = as.character(mean(.data$prior_history, na.rm = TRUE)),
#prior_history.std = as.character(stats::sd(.data$prior_history, na.rm = TRUE)),
number_observations.count = as.character(dplyr::n()),
cohort_start_date.min = as.character(min(
.data$cohort_start_date,
na.rm = TRUE
)),
cohort_start_date.max = as.character(max(
.data$cohort_start_date,
na.rm = TRUE
)),
cohort_end_date.min = as.character(min(
.data$cohort_end_date,
na.rm = TRUE
)),
cohort_end_date.max = as.character(max(
.data$cohort_end_date,
na.rm = TRUE
)),
.groups = "drop"
)
targetCohort %>%
dplyr::left_join(
subjects,
by = c("subject_id", "cohort_start_date", "cohort_end_date")
) %>%
dplyr::group_by(.data$cohort_definition_id) %>%
dplyr::summarise(
number_obervations.count = as.character(dplyr::n()),
number_subjects.count = as.character(dplyr::n_distinct(.data$subject_id)),
sex_female.count = as.character(dplyr::count(.data$sex[.data$sex == "Female"])),
sex_male.count = as.character(dplyr::count(.data$sex[.data$sex == "Male"])),
age.mean = as.character(mean(.data$age, na.rm = TRUE)),
age.std = as.character(stats::sd(age, na.rm = TRUE)),
prior_history.mean = as.character(mean(.data$prior_history, na.rm = TRUE)),
#prior_history.std = as.character(stats::sd(.data$prior_history, na.rm = TRUE)),
number_observations.count = as.character(dplyr::n()),
cohort_start_date.min = as.character(min(
.data$cohort_start_date,
na.rm = TRUE
)),
cohort_start_date.max = as.character(max(
.data$cohort_start_date,
na.rm = TRUE
)),
cohort_end_date.min = as.character(min(
.data$cohort_end_date,
na.rm = TRUE
)),
cohort_end_date.max = as.character(max(
.data$cohort_end_date,
na.rm = TRUE
)),
.groups = "drop"
)
targetCohort %>%
dplyr::left_join(
subjects,
by = c("subject_id", "cohort_start_date", "cohort_end_date")
) %>%
dplyr::group_by(.data$cohort_definition_id) %>%
dplyr::summarise(
number_obervations.count = as.character(dplyr::n()),
number_subjects.count = as.character(dplyr::n_distinct(.data$subject_id)),
sex_female.count = as.character(dplyr::count(.data$sex[.data$sex == "Female"])),
sex_male.count = as.character(dplyr::count(.data$sex[.data$sex == "Male"])),
age.mean = as.character(mean(.data$age, na.rm = TRUE)),
age.std = as.character(sd(.data$age, na.rm = TRUE)),
prior_history.mean = as.character(mean(.data$prior_history, na.rm = TRUE)),
#prior_history.std = as.character(stats::sd(.data$prior_history, na.rm = TRUE)),
number_observations.count = as.character(dplyr::n()),
cohort_start_date.min = as.character(min(
.data$cohort_start_date,
na.rm = TRUE
)),
cohort_start_date.max = as.character(max(
.data$cohort_start_date,
na.rm = TRUE
)),
cohort_end_date.min = as.character(min(
.data$cohort_end_date,
na.rm = TRUE
)),
cohort_end_date.max = as.character(max(
.data$cohort_end_date,
na.rm = TRUE
)),
.groups = "drop"
)
