if (!is.null(ageGroups)) {
for (i in seq_along(ageGroups)) {
checkmate::assertTRUE(length(ageGroups[[i]]) == 2)
checkmate::assert_numeric(ageGroups[[i]][1],
add = errorMessage
)
checkmate::assert_numeric(ageGroups[[i]][2],
add = errorMessage
)
ageCheck <- ageGroups[[i]][1] <=
ageGroups[[i]][2]
checkmate::assertTRUE(ageCheck,
add = errorMessage
)
if (!isTRUE(ageCheck)) {
errorMessage$push(
"- upper age value must be equal or higher than lower age value"
)
}
checkmate::assertTRUE(ageGroups[[i]][1] >= 0,
add = errorMessage
)
checkmate::assertTRUE(ageGroups[[i]][2] >= 0,
add = errorMessage
)
}
}
checkmate::assertTRUE(length(listTables) == length(unique(names(listTables))))
namesTables <- names(listTables)
namesTables <- lapply(
stringr::str_split(namesTables, "[[:upper:]]"),
function(x) {
x[1]
}
) %>%
unlist() %>%
unique()
if (length(namesTables) > 0) {
for (k in 1:length(namesTables)) {
errorMessage <- checkmate::makeAssertCollection()
name <- namesTables[k]
tableName <- listTables[[paste0(name, "TableName")]]
set <- listTables[[paste0(name, "Set")]]
lookbackWindow <- listTables[[paste0(name, "Window")]]
checkmate::assertTibble(set, add = errorMessage)
checkmate::assertTRUE(
all(c("cohortId", "cohortName") %in% colnames(set)),
add = errorMessage
)
checkmate::assertIntegerish(set$cohortId, add = errorMessage)
checkmate::assertCharacter(
set$cohortName,
any.missing = FALSE, add = errorMessage
)
checkmate::assertIntegerish(
lookbackWindow,
min.len = 1,
max.len = 2,
null.ok = FALSE,
add = errorMessage
)
checkmate::assertTRUE(tableName %in% names(cdm), add = errorMessage)
checkmate::assertTRUE(
all(colnames(cdm[[tableName]]) %in% c(
"cohort_definition_id", "subject_id", "cohort_start_date",
"cohort_end_date"
)),
add = errorMessage
)
if (!errorMessage$isEmpty()) {
errorMessage$push(paste0("- In ", name))
}
checkmate::reportAssertions(collection = errorMessage)
}
}
namesTables
listTables
listTables <- list()
if (is.null(targetCohortId)) {
targetCohortId <- targetCohort %>%
dplyr::select("cohort_definition_id") %>%
dplyr::distinct() %>%
dplyr::pull()
} else {
targetCohort <- targetCohort %>%
dplyr::filter(.data$cohort_definition_id %in% .env$targetCohortId)
}
subjects <- targetCohort %>%
dplyr::select("subject_id", "cohort_start_date", "cohort_end_date") %>%
dplyr::distinct() %>%
addPriorHistory(cdm = cdm) %>%
addSex(cdm = cdm) %>%
addAge(cdm = cdm) %>%
dplyr::compute()
result <- targetCohort %>%
dplyr::left_join(
subjects,
by = c("subject_id", "cohort_start_date", "cohort_end_date")
) %>%
dplyr::group_by(.data$cohort_definition_id) %>%
dplyr::summarise(
number_obervations.count = as.character(dplyr::n()),
number_subjects.count = as.character(dplyr::n_distinct(.data$subject_id)),
sex_female.count = as.character(dplyr::count(.data$sex[.data$sex == "Female"])),
sex_male.count = as.character(dplyr::count(.data$sex[.data$sex == "Male"])),
age.mean = as.character(mean(.data$age, na.rm = TRUE)),
age.std = as.character(stats::sd(.data$age, na.rm = TRUE)),
prior_history.mean = as.character(mean(.data$prior_history, na.rm = TRUE)),
prior_history.std = as.character(stats::sd(.data$prior_history, na.rm = TRUE)),
number_observations.count = as.character(dplyr::n()),
cohort_start_date.min = as.character(min(
.data$cohort_start_date,
na.rm = TRUE
)),
cohort_start_date.max = as.character(max(
.data$cohort_start_date,
na.rm = TRUE
)),
cohort_end_date.min = as.character(min(
.data$cohort_end_date,
na.rm = TRUE
)),
cohort_end_date.max = as.character(max(
.data$cohort_end_date,
na.rm = TRUE
)),
.groups = "drop"
) %>%
dplyr::collect() %>%
dplyr::left_join(
targetCohort %>%
dplyr::left_join(
subjects,
by = c("subject_id", "cohort_start_date", "cohort_end_date")
) %>%
dplyr::group_by(.data$cohort_definition_id) %>%
dplyr::summarise(
age.median = as.character(stats::median(.data$age, na.rm = TRUE)),
age.quantile25 = as.character(stats::quantile(.data$age, 0.25, na.rm = TRUE)),
age.quantile75 = as.character(stats::quantile(.data$age, 0.75, na.rm = TRUE)),
.groups = "drop"
) %>%
dplyr::collect(),
by = "cohort_definition_id"
) %>%
dplyr::left_join(
targetCohort %>%
dplyr::left_join(
subjects,
by = c("subject_id", "cohort_start_date", "cohort_end_date")
) %>%
dplyr::group_by(.data$cohort_definition_id) %>%
dplyr::summarise(
prior_history.median = as.character(stats::median(.data$prior_history, na.rm = TRUE)),
prior_history.quantile25 = as.character(stats::quantile(.data$prior_history, 0.25, na.rm = TRUE)),
prior_history.quantile75 = as.character(stats::quantile(.data$prior_history, 0.75, na.rm = TRUE)),
.groups = "drop"
) %>%
dplyr::collect(),
by = "cohort_definition_id"
)
targetCohort %>%
dplyr::left_join(
subjects,
by = c("subject_id", "cohort_start_date", "cohort_end_date")
)
targetCohort %>%
dplyr::left_join(
subjects,
by = c("subject_id", "cohort_start_date", "cohort_end_date")
) %>%
dplyr::group_by(.data$cohort_definition_id) %>%
dplyr::summarise(
number_obervations.count = as.character(dplyr::n()),
number_subjects.count = as.character(dplyr::n_distinct(.data$subject_id)),
sex_female.count = as.character(dplyr::count(.data$sex[.data$sex == "Female"])),
sex_male.count = as.character(dplyr::count(.data$sex[.data$sex == "Male"])),
age.mean = as.character(mean(.data$age, na.rm = TRUE)),
age.std = as.character(stats::sd(.data$age, na.rm = TRUE)),
prior_history.mean = as.character(mean(.data$prior_history, na.rm = TRUE)),
prior_history.std = as.character(stats::sd(.data$prior_history, na.rm = TRUE)),
number_observations.count = as.character(dplyr::n()),
cohort_start_date.min = as.character(min(
.data$cohort_start_date,
na.rm = TRUE
)),
cohort_start_date.max = as.character(max(
.data$cohort_start_date,
na.rm = TRUE
)),
cohort_end_date.min = as.character(min(
.data$cohort_end_date,
na.rm = TRUE
)),
cohort_end_date.max = as.character(max(
.data$cohort_end_date,
na.rm = TRUE
)),
.groups = "drop"
)
targetCohort %>%
dplyr::left_join(
subjects,
by = c("subject_id", "cohort_start_date", "cohort_end_date")
) %>%
dplyr::group_by(.data$cohort_definition_id) %>%
dplyr::summarise(
number_obervations.count = as.character(dplyr::n()),
number_subjects.count = as.character(dplyr::n_distinct(.data$subject_id)),
sex_female.count = as.character(dplyr::count(.data$sex[.data$sex == "Female"])),
sex_male.count = as.character(dplyr::count(.data$sex[.data$sex == "Male"])),
age.mean = as.character(mean(.data$age, na.rm = TRUE)),
#age.std = as.character(stats::sd(.data$age, na.rm = TRUE)),
prior_history.mean = as.character(mean(.data$prior_history, na.rm = TRUE)),
prior_history.std = as.character(stats::sd(.data$prior_history, na.rm = TRUE)),
number_observations.count = as.character(dplyr::n()),
cohort_start_date.min = as.character(min(
.data$cohort_start_date,
na.rm = TRUE
)),
cohort_start_date.max = as.character(max(
.data$cohort_start_date,
na.rm = TRUE
)),
cohort_end_date.min = as.character(min(
.data$cohort_end_date,
na.rm = TRUE
)),
cohort_end_date.max = as.character(max(
.data$cohort_end_date,
na.rm = TRUE
)),
.groups = "drop"
)
targetCohort %>%
dplyr::left_join(
subjects,
by = c("subject_id", "cohort_start_date", "cohort_end_date")
) %>%
dplyr::group_by(.data$cohort_definition_id) %>%
dplyr::summarise(
number_obervations.count = as.character(dplyr::n()),
number_subjects.count = as.character(dplyr::n_distinct(.data$subject_id)),
sex_female.count = as.character(dplyr::count(.data$sex[.data$sex == "Female"])),
sex_male.count = as.character(dplyr::count(.data$sex[.data$sex == "Male"])),
age.mean = as.character(mean(.data$age, na.rm = TRUE)),
#age.std = as.character(stats::sd(.data$age, na.rm = TRUE)),
prior_history.mean = as.character(mean(.data$prior_history, na.rm = TRUE)),
#prior_history.std = as.character(stats::sd(.data$prior_history, na.rm = TRUE)),
number_observations.count = as.character(dplyr::n()),
cohort_start_date.min = as.character(min(
.data$cohort_start_date,
na.rm = TRUE
)),
cohort_start_date.max = as.character(max(
.data$cohort_start_date,
na.rm = TRUE
)),
cohort_end_date.min = as.character(min(
.data$cohort_end_date,
na.rm = TRUE
)),
cohort_end_date.max = as.character(max(
.data$cohort_end_date,
na.rm = TRUE
)),
.groups = "drop"
)
targetCohort %>%
dplyr::left_join(
subjects,
by = c("subject_id", "cohort_start_date", "cohort_end_date")
) %>%
dplyr::group_by(.data$cohort_definition_id) %>%
dplyr::summarise(
number_obervations.count = as.character(dplyr::n()),
number_subjects.count = as.character(dplyr::n_distinct(.data$subject_id)),
sex_female.count = as.character(dplyr::count(.data$sex[.data$sex == "Female"])),
sex_male.count = as.character(dplyr::count(.data$sex[.data$sex == "Male"])),
age.mean = as.character(mean(.data$age, na.rm = TRUE)),
age.std = as.character(stats::sd(age, na.rm = TRUE)),
prior_history.mean = as.character(mean(.data$prior_history, na.rm = TRUE)),
#prior_history.std = as.character(stats::sd(.data$prior_history, na.rm = TRUE)),
number_observations.count = as.character(dplyr::n()),
cohort_start_date.min = as.character(min(
.data$cohort_start_date,
na.rm = TRUE
)),
cohort_start_date.max = as.character(max(
.data$cohort_start_date,
na.rm = TRUE
)),
cohort_end_date.min = as.character(min(
.data$cohort_end_date,
na.rm = TRUE
)),
cohort_end_date.max = as.character(max(
.data$cohort_end_date,
na.rm = TRUE
)),
.groups = "drop"
)
targetCohort %>%
dplyr::left_join(
subjects,
by = c("subject_id", "cohort_start_date", "cohort_end_date")
) %>%
dplyr::group_by(.data$cohort_definition_id) %>%
dplyr::summarise(
number_obervations.count = as.character(dplyr::n()),
number_subjects.count = as.character(dplyr::n_distinct(.data$subject_id)),
sex_female.count = as.character(dplyr::count(.data$sex[.data$sex == "Female"])),
sex_male.count = as.character(dplyr::count(.data$sex[.data$sex == "Male"])),
age.mean = as.character(mean(.data$age, na.rm = TRUE)),
age.std = as.character(sd(.data$age, na.rm = TRUE)),
prior_history.mean = as.character(mean(.data$prior_history, na.rm = TRUE)),
#prior_history.std = as.character(stats::sd(.data$prior_history, na.rm = TRUE)),
number_observations.count = as.character(dplyr::n()),
cohort_start_date.min = as.character(min(
.data$cohort_start_date,
na.rm = TRUE
)),
cohort_start_date.max = as.character(max(
.data$cohort_start_date,
na.rm = TRUE
)),
cohort_end_date.min = as.character(min(
.data$cohort_end_date,
na.rm = TRUE
)),
cohort_end_date.max = as.character(max(
.data$cohort_end_date,
na.rm = TRUE
)),
.groups = "drop"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
install.packages("remotes")
remotes::install_github("darwin-eu/DrugUtilisation")
install.packages("remotes")
remotes::install_github("darwin-eu/DrugUtilisation")
install.packages("remotes")
install.packages("CDMConnector")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
install.packages("remotes")
remotes::install_github("darwin-eu/DrugUtilisation")
install.packages("remotes")
install.packages("remotes")
remotes::install_github("darwin-eu/DrugUtilisation")
install.packages("CDMConnector")
install.packages("Rtools")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
install.packages("remotes")
remotes::install_github("darwin-eu/DrugUtilisation")
install.packages("stringr")
install.packages("glue")
remove.packages('glue')
install.packages("glue")
remove.packages('glue')
install.packages("stringr")
remove.packages("strignr")
install.packages("stringr")
library(stringr)
install.packages("remotes")
remotes::install_github("darwin-eu/DrugUtilisation")
install.packages("remotes")
install.packages("CDMConnector")
library(CDMConnector)
Sys.which("make")
install.packages("rtools")
library(rtools)
Sys.which("make")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
install.packages("knitr")
install.packages("knitr")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
install.packages("remotes")
remotes::install_github("darwin-eu/DrugUtilisation")
install.packages("remotes")
remotes::install_github("darwin-eu/DrugUtilisation")
install.packages("remotes")
install.packages("remotes")
remotes::install_github("darwin-eu/DrugUtilisation")
install.packages("lifecycle")
remove.packages("rlang")
install.packages("rlang")
install.packages("lifecycle")
install.packages("lifecycle")
install.packages("lifecycle")
library(lifecycle)
install.packages("cpp11")
library(cpp11)
install.packages(pillar)
install.packages("pillar")
install.packages("vctrs")
install.packages("remotes")
remotes::install_github("darwin-eu/DrugUtilisation")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
install.packages("remotes")
remotes::install_github("darwin-eu/DrugUtilisation")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
install.packages("remotes")
remotes::install_github("darwin-eu/DrugUtilisation")
install.packages("CDMConnector")
install.packages("SqlRender")
install.packages("rJava")
library(rJava)
install.packages("SqlRender")
install.packages("remotes")
remotes::install_github("darwin-eu/DrugUtilisation")
install.packages("remotes")
library(sqlrender)
library(SqlRender)
install.packages("SqlRender")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
install.packages("remotes")
remotes::install_github("darwin-eu/DrugUtilisation")
install.packages("CDMConnector")
remove.packages("SqlRender")
install.packages("SqlRender")
install.packages("devtools")
install.packages("bslib")
install.packages("htmltools")
library(htmltools)
install.packages("bslib")
install.packages("bslib")
install.packages("htmltools")
install.packages("htmltools")
library(htmltools)
install.packages("bslib")
library(bslib)
install.packages("sqlrender")
install.packages("SqlRender")
library(devtools)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
install.packages("remotes")
remotes::install_github("darwin-eu/DrugUtilisation")
install.packages("remotes")
remotes::install_github("darwin-eu/DrugUtilisation")
install.packages("CDMConnector")
library(CDMConnector)
library(DrugUtilisation)
# We first need to create a cdm_reference
cdm <- mockDrugUtilisation()
# and this is what this example data looks like
head(cdm$person)
head(cdm$observation_period)
head(cdm$drug_exposure)
head(cdm$drug_strength)
cdm$my_cohort <- generateDrugUtilisationCohort(
cdm = cdm,
ingredientConceptId = 1
)
library(dplyr)
cdm[["my_cohort"]] <- generateDrugUtilisationCohort(
cdm = cdm,
conceptSetPath = here("FolderWithJsonFiles")
)
# instantiate indication cohorts
indicationCohorts <- readCohortSet(path = here("IndicationCohorts"))
devtools::install_github('OHDSI/CirceR')
install.packages("rJava")
install.packages("rJava")
library(rJava)
devtools::install_github('OHDSI/CirceR')
# instantiate indication cohorts
indicationCohorts <- readCohortSet(path = here("IndicationCohorts"))
